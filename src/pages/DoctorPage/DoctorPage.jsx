import { useEffect, useState } from "react";
import { Steps, Table, Input, Form, Button, Checkbox, message, Modal } from "antd";
import { useDispatch, useSelector } from "react-redux";
import { setSelectedChildByDoctor } from "../../redux/features/doctorSlice";
import {
  LogoutOutlined,
  ArrowLeftOutlined,
  ArrowRightOutlined,
  CheckOutlined,
  MedicineBoxOutlined,
} from "@ant-design/icons";
import api from "../../config/axios";
import { useNavigate } from "react-router-dom";
import "./DoctorPage.scss";
import { logout } from "../../redux/features/userSlice";

const { Step } = Steps;

const DoctorPage = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  const selectedChild = useSelector((state) => state.doctor.selectedChild);
  const [schedules, setSchedules] = useState([]);
  const [search, setSearch] = useState("");
  const [currentStep, setCurrentStep] = useState(0);
  const [form] = Form.useForm();
  const [postVaccineForm] = Form.useForm();
  const [medicalInfo, setMedicalInfo] = useState({
    weight: "",
    height: "",
    temperature: "",
    bloodPressure: "",
    heartRate: "",
    medicalHistory: "",
    predefinedDiseases: "",
    heartDisease: false,
    hypertension: false,
    drugAllergy: false,
    foodAllergy: false,
    noChronic: false,
    otherDiseases: "",
    currentMedications: "",
    previousVaccineReactions: "",
  });
  const [postVaccineInfo, setPostVaccineInfo] = useState({
    localReaction: false,
    fever: false,
    muscleAche: false,
    fatigue: false,
    headache: false,
    nausea: false,
    otherReactions: "",
    severityLevel: "nh·∫π",
    notes: "",
  });
  const [vaccineAdministered, setVaccineAdministered] = useState(false);

  useEffect(() => {
    const fetchSchedules = async () => {
      try {
        const response = await api.get("schedule");
        if (response.data.statusCode === 200) {
          const filteredData = response.data.data.filter((item) =>
            ["Check-in", "Vaccinated", "Completed"].includes(item.scheduleStatus)
          );
          setSchedules(filteredData);
        }
      } catch (error) {
        console.error("Error fetching schedules", error);
      }
    };

    fetchSchedules();
    const interval = setInterval(fetchSchedules, 30000);
    return () => clearInterval(interval);
  }, []);

  // Handle "No chronic diseases" checkbox
  useEffect(() => {
    if (medicalInfo.noChronic) {
      setMedicalInfo({
        ...medicalInfo,
        heartDisease: false,
        hypertension: false,
        drugAllergy: false,
        foodAllergy: false,
      });
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [medicalInfo.noChronic]);

  // Handle other disease checkboxes
  useEffect(() => {
    if (medicalInfo.heartDisease || medicalInfo.hypertension || medicalInfo.drugAllergy || medicalInfo.foodAllergy) {
      setMedicalInfo({
        ...medicalInfo,
        noChronic: false,
      });
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [medicalInfo.heartDisease, medicalInfo.hypertension, medicalInfo.drugAllergy, medicalInfo.foodAllergy]);

  const handleSelectChild = (record) => {
    dispatch(setSelectedChildByDoctor(record));
    setCurrentStep(1);
  };

  const handleLogout = () => {
    Modal.confirm({
      title: "ƒêƒÉng xu·∫•t",
      content: "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t?",
      onOk: () => {
        localStorage.removeItem("token");
        dispatch(setSelectedChildByDoctor(null));
        dispatch(logout());
        navigate("/login");
      },
    });
  };

  const goBack = () => {
    setCurrentStep(currentStep - 1);
  };

  const proceedToNextStep = async () => {
    if (currentStep === 0) {
      if (!selectedChild) {
        message.error("Vui l√≤ng ch·ªçn m·ªôt b·ªánh nh√¢n tr∆∞·ªõc khi ti·∫øp t·ª•c");
        return;
      }
      setCurrentStep(1);
    } else if (currentStep === 1) {
      try {
        await form.validateFields();
        setCurrentStep(2);
      } catch (error) {
        message.error("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin y t·∫ø tr∆∞·ªõc khi ti·∫øp t·ª•c", error);
      }
    } else if (currentStep === 2) {
      setVaccineAdministered(true);
      setCurrentStep(3);
    } else if (currentStep === 3) {
      try {
        await postVaccineForm.validateFields();
        setCurrentStep(4);
      } catch (error) {
        message.error("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin ph·∫£n ·ª©ng sau ti√™m ch·ªßng", error);
      }
    }
  };

  const finishProcess = async () => {
    try {
      // Submit the data to your API
      const response = await api.post("medical-record", {
        childId: selectedChild.childrenId,
        scheduleId: selectedChild.scheduleId,
        ...medicalInfo,
        postVaccineReactions: postVaccineInfo,
      });

      if (response.data.statusCode === 200) {
        message.success("Qu√° tr√¨nh kh√°m b·ªánh v√† ti√™m ch·ªßng ho√†n t·∫•t!");
        // Reset form and return to first step
        setMedicalInfo({
          weight: "",
          height: "",
          temperature: "",
          bloodPressure: "",
          heartRate: "",
          medicalHistory: "",
          predefinedDiseases: "",
          heartDisease: false,
          hypertension: false,
          drugAllergy: false,
          foodAllergy: false,
          noChronic: false,
          otherDiseases: "",
          currentMedications: "",
          previousVaccineReactions: "",
        });
        setPostVaccineInfo({
          localReaction: false,
          fever: false,
          muscleAche: false,
          fatigue: false,
          headache: false,
          nausea: false,
          otherReactions: "",
          severityLevel: "nh·∫π",
          notes: "",
        });
        setVaccineAdministered(false);
        dispatch(setSelectedChildByDoctor(null));
        setCurrentStep(0);
      }
    } catch (error) {
      message.error("C√≥ l·ªói x·∫£y ra khi g·ª≠i d·ªØ li·ªáu");
      console.error("Error submitting medical data", error);
    }
  };

  const columns = [
    { title: "T√™n tr·∫ª", dataIndex: "childrenName", key: "childrenName" },
    { title: "T√™n vaccine", dataIndex: "vaccineName", key: "vaccineName" },
    { title: "Ng√†y h·∫πn", dataIndex: "scheduleDate", key: "scheduleDate" },
    { title: "Tr·∫°ng th√°i", dataIndex: "scheduleStatus", key: "scheduleStatus" },
    {
      title: "H√†nh ƒë·ªông",
      key: "action",
      render: (_, record) => (
        <Button type="primary" onClick={() => handleSelectChild(record)}>
          Ch·ªçn
        </Button>
      ),
    },
  ];

  const renderStepContent = () => {
    switch (currentStep) {
      case 0:
        return (
          <div className="step-container">
            <div className="search-container">
              <Input
                placeholder="T√¨m ki·∫øm theo t√™n tr·∫ª"
                value={search}
                onChange={(e) => setSearch(e.target.value)}
                className="search-input"
                prefix={<span className="search-icon">üîç</span>}
              />
            </div>
            <Table
              dataSource={schedules.filter((item) => item.childrenName.toLowerCase().includes(search.toLowerCase()))}
              columns={columns}
              rowKey="childrenId"
              className="patient-table"
              pagination={{ pageSize: 8 }}
            />
            <div className="navigation-buttons">
              <Button type="primary" onClick={proceedToNextStep} disabled={!selectedChild} className="next-button">
                Ti·∫øp t·ª•c <ArrowRightOutlined />
              </Button>
            </div>
          </div>
        );
      case 1:
        return (
          <div className="step-container">
            <div className="patient-header">
              <h2>Th√¥ng tin b·ªánh nh√¢n: {selectedChild?.childrenName}</h2>
              <p>Vaccine: {selectedChild?.vaccineName}</p>
            </div>
            <Form form={form} layout="vertical" className="medical-form">
              <div className="form-row">
                <Form.Item
                  name="weight"
                  label="C√¢n n·∫∑ng (kg)"
                  rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p c√¢n n·∫∑ng" }]}
                >
                  <Input
                    value={medicalInfo.weight}
                    onChange={(e) => setMedicalInfo({ ...medicalInfo, weight: e.target.value })}
                    suffix="kg"
                  />
                </Form.Item>
                <Form.Item
                  name="height"
                  label="Chi·ªÅu cao (cm)"
                  rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p chi·ªÅu cao" }]}
                >
                  <Input
                    value={medicalInfo.height}
                    onChange={(e) => setMedicalInfo({ ...medicalInfo, height: e.target.value })}
                    suffix="cm"
                  />
                </Form.Item>
              </div>

              <div className="form-row">
                <Form.Item
                  name="temperature"
                  label="Nhi·ªát ƒë·ªô (¬∞C)"
                  rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p nhi·ªát ƒë·ªô" }]}
                >
                  <Input
                    value={medicalInfo.temperature}
                    onChange={(e) => setMedicalInfo({ ...medicalInfo, temperature: e.target.value })}
                    suffix="¬∞C"
                  />
                </Form.Item>
                <Form.Item
                  name="bloodPressure"
                  label="Huy·∫øt √°p (mmHg)"
                  rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p huy·∫øt √°p" }]}
                >
                  <Input
                    value={medicalInfo.bloodPressure}
                    onChange={(e) => setMedicalInfo({ ...medicalInfo, bloodPressure: e.target.value })}
                    suffix="mmHg"
                  />
                </Form.Item>
              </div>

              <Form.Item
                name="heartRate"
                label="Nh·ªãp tim (BPM)"
                rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p nh·ªãp tim" }]}
              >
                <Input
                  value={medicalInfo.heartRate}
                  onChange={(e) => setMedicalInfo({ ...medicalInfo, heartRate: e.target.value })}
                  suffix="BPM"
                />
              </Form.Item>

              <Form.Item
                name="medicalHistory"
                label="Ti·ªÅn s·ª≠ b·ªánh √°n"
                rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p ti·ªÅn s·ª≠ b·ªánh √°n" }]}
              >
                <Input.TextArea
                  value={medicalInfo.medicalHistory}
                  onChange={(e) => setMedicalInfo({ ...medicalInfo, medicalHistory: e.target.value })}
                  rows={4}
                />
              </Form.Item>

              <div className="diseases-section">
                <h3>B·ªánh m√£n t√≠nh:</h3>
                <Form.Item name="heartDisease">
                  <Checkbox
                    checked={medicalInfo.heartDisease}
                    onChange={(e) => setMedicalInfo({ ...medicalInfo, heartDisease: e.target.checked })}
                  >
                    B·ªánh tim m·∫°ch
                  </Checkbox>
                </Form.Item>
                <Form.Item name="hypertension">
                  <Checkbox
                    checked={medicalInfo.hypertension}
                    onChange={(e) => setMedicalInfo({ ...medicalInfo, hypertension: e.target.checked })}
                  >
                    TƒÉng huy·∫øt √°p
                  </Checkbox>
                </Form.Item>
                <Form.Item name="drugAllergy">
                  <Checkbox
                    checked={medicalInfo.drugAllergy}
                    onChange={(e) => setMedicalInfo({ ...medicalInfo, drugAllergy: e.target.checked })}
                  >
                    D·ªã ·ª©ng c√°c th√†nh ph·∫ßn c∆° b·∫£n c·ªßa thu·ªëc
                  </Checkbox>
                </Form.Item>
                <Form.Item name="foodAllergy">
                  <Checkbox
                    checked={medicalInfo.foodAllergy}
                    onChange={(e) => setMedicalInfo({ ...medicalInfo, foodAllergy: e.target.checked })}
                  >
                    D·ªã ·ª©ng th·ª©c ƒÉn
                  </Checkbox>
                </Form.Item>
                <Form.Item name="noChronic">
                  <Checkbox
                    checked={medicalInfo.noChronic}
                    onChange={(e) => setMedicalInfo({ ...medicalInfo, noChronic: e.target.checked })}
                  >
                    Kh√¥ng c√≥ b·ªánh m√£n t√≠nh
                  </Checkbox>
                </Form.Item>
              </div>

              <Form.Item name="otherDiseases" label="B·ªánh kh√°c">
                <Input.TextArea
                  value={medicalInfo.otherDiseases}
                  onChange={(e) => setMedicalInfo({ ...medicalInfo, otherDiseases: e.target.value })}
                  rows={2}
                />
              </Form.Item>

              <Form.Item
                name="currentMedications"
                label="Thu·ªëc ƒëang s·ª≠ d·ª•ng"
                rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p thu·ªëc ƒëang s·ª≠ d·ª•ng ho·∫∑c 'Kh√¥ng c√≥'" }]}
              >
                <Input.TextArea
                  value={medicalInfo.currentMedications}
                  onChange={(e) => setMedicalInfo({ ...medicalInfo, currentMedications: e.target.value })}
                  rows={2}
                />
              </Form.Item>

              <Form.Item
                name="previousVaccineReactions"
                label="Ph·∫£n ·ª©ng sau ti√™m ch·ªßng tr∆∞·ªõc ƒë√¢y"
                rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p th√¥ng tin ho·∫∑c 'Kh√¥ng c√≥'" }]}
              >
                <Input.TextArea
                  value={medicalInfo.previousVaccineReactions}
                  onChange={(e) => setMedicalInfo({ ...medicalInfo, previousVaccineReactions: e.target.value })}
                  rows={2}
                />
              </Form.Item>

              <div className="navigation-buttons">
                <Button type="default" onClick={goBack} className="back-button">
                  <ArrowLeftOutlined /> Quay l·∫°i
                </Button>
                <Button type="primary" onClick={proceedToNextStep} className="next-button">
                  Ti·∫øp t·ª•c <ArrowRightOutlined />
                </Button>
              </div>
            </Form>
          </div>
        );
      case 2:
        return (
          <div className="step-container">
            <div className="confirmation-container">
              <h2>X√°c nh·∫≠n th√¥ng tin y t·∫ø</h2>
              <div className="confirmation-header">
                <h3>B·ªánh nh√¢n: {selectedChild?.childrenName}</h3>
                <p>Vaccine: {selectedChild?.vaccineName}</p>
                <p>Ng√†y h·∫πn: {selectedChild?.scheduleDate}</p>
              </div>

              <div className="confirmation-section">
                <h3>Th√¥ng tin c∆° b·∫£n</h3>
                <div className="confirmation-grid">
                  <div className="info-item">
                    <span className="label">C√¢n n·∫∑ng:</span>
                    <span className="value">{medicalInfo.weight} kg</span>
                  </div>
                  <div className="info-item">
                    <span className="label">Chi·ªÅu cao:</span>
                    <span className="value">{medicalInfo.height} cm</span>
                  </div>
                  <div className="info-item">
                    <span className="label">Nhi·ªát ƒë·ªô:</span>
                    <span className="value">{medicalInfo.temperature} ¬∞C</span>
                  </div>
                  <div className="info-item">
                    <span className="label">Huy·∫øt √°p:</span>
                    <span className="value">{medicalInfo.bloodPressure} mmHg</span>
                  </div>
                  <div className="info-item">
                    <span className="label">Nh·ªãp tim:</span>
                    <span className="value">{medicalInfo.heartRate} BPM</span>
                  </div>
                </div>
              </div>

              <div className="confirmation-section">
                <h3>Ti·ªÅn s·ª≠ b·ªánh √°n</h3>
                <p>{medicalInfo.medicalHistory}</p>
              </div>

              <div className="confirmation-section">
                <h3>B·ªánh m√£n t√≠nh</h3>
                <ul>
                  {medicalInfo.heartDisease && <li>B·ªánh tim m·∫°ch</li>}
                  {medicalInfo.hypertension && <li>TƒÉng huy·∫øt √°p</li>}
                  {medicalInfo.drugAllergy && <li>D·ªã ·ª©ng c√°c th√†nh ph·∫ßn c∆° b·∫£n c·ªßa thu·ªëc</li>}
                  {medicalInfo.foodAllergy && <li>D·ªã ·ª©ng th·ª©c ƒÉn</li>}
                  {medicalInfo.noChronic && <li>Kh√¥ng c√≥ b·ªánh m√£n t√≠nh</li>}
                  {medicalInfo.otherDiseases && <li>Kh√°c: {medicalInfo.otherDiseases}</li>}
                </ul>
                {!medicalInfo.heartDisease &&
                  !medicalInfo.hypertension &&
                  !medicalInfo.drugAllergy &&
                  !medicalInfo.foodAllergy &&
                  !medicalInfo.noChronic &&
                  !medicalInfo.otherDiseases && <p>Kh√¥ng c√≥ b·ªánh m√£n t√≠nh</p>}
              </div>

              <div className="confirmation-section">
                <h3>Thu·ªëc ƒëang s·ª≠ d·ª•ng</h3>
                <p>{medicalInfo.currentMedications || "Kh√¥ng c√≥"}</p>
              </div>

              <div className="confirmation-section">
                <h3>Ph·∫£n ·ª©ng sau ti√™m ch·ªßng tr∆∞·ªõc ƒë√¢y</h3>
                <p>{medicalInfo.previousVaccineReactions || "Kh√¥ng c√≥"}</p>
              </div>

              <div className="navigation-buttons">
                <Button type="default" onClick={goBack} className="back-button">
                  <ArrowLeftOutlined /> Quay l·∫°i
                </Button>
                <Button type="primary" onClick={proceedToNextStep} className="next-button">
                  Ti·∫øn h√†nh ti√™m ch·ªßng <MedicineBoxOutlined />
                </Button>
              </div>
            </div>
          </div>
        );
      case 3:
        return (
          <div className="step-container">
            <div className="vaccination-container">
              <h2>Ti·∫øn h√†nh ti√™m ch·ªßng</h2>
              <div className="vaccination-details">
                <h3>Th√¥ng tin ti√™m ch·ªßng</h3>
                <p>B·ªánh nh√¢n: {selectedChild?.childrenName}</p>
                <p>Vaccine: {selectedChild?.vaccineName}</p>
                <p>Tr·∫°ng th√°i: {vaccineAdministered ? "ƒê√£ ti√™m" : "Ch∆∞a ti√™m"}</p>
              </div>

              <div className="observation-section">
                <h3>Ghi nh·∫≠n ph·∫£n ·ª©ng sau ti√™m</h3>
                <Form form={postVaccineForm} layout="vertical" className="post-vaccine-form">
                  <div className="reactions-section">
                    <Form.Item name="localReaction">
                      <Checkbox
                        checked={postVaccineInfo.localReaction}
                        onChange={(e) => setPostVaccineInfo({ ...postVaccineInfo, localReaction: e.target.checked })}
                      >
                        Ph·∫£n ·ª©ng t·∫°i ch·ªó (ƒëau, s∆∞ng, ƒë·ªè)
                      </Checkbox>
                    </Form.Item>
                    <Form.Item name="fever">
                      <Checkbox
                        checked={postVaccineInfo.fever}
                        onChange={(e) => setPostVaccineInfo({ ...postVaccineInfo, fever: e.target.checked })}
                      >
                        S·ªët
                      </Checkbox>
                    </Form.Item>
                    <Form.Item name="muscleAche">
                      <Checkbox
                        checked={postVaccineInfo.muscleAche}
                        onChange={(e) => setPostVaccineInfo({ ...postVaccineInfo, muscleAche: e.target.checked })}
                      >
                        ƒêau c∆°
                      </Checkbox>
                    </Form.Item>
                    <Form.Item name="fatigue">
                      <Checkbox
                        checked={postVaccineInfo.fatigue}
                        onChange={(e) => setPostVaccineInfo({ ...postVaccineInfo, fatigue: e.target.checked })}
                      >
                        M·ªát m·ªèi
                      </Checkbox>
                    </Form.Item>
                    <Form.Item name="headache">
                      <Checkbox
                        checked={postVaccineInfo.headache}
                        onChange={(e) => setPostVaccineInfo({ ...postVaccineInfo, headache: e.target.checked })}
                      >
                        ƒêau ƒë·∫ßu
                      </Checkbox>
                    </Form.Item>
                    <Form.Item name="nausea">
                      <Checkbox
                        checked={postVaccineInfo.nausea}
                        onChange={(e) => setPostVaccineInfo({ ...postVaccineInfo, nausea: e.target.checked })}
                      >
                        Bu·ªìn n√¥n
                      </Checkbox>
                    </Form.Item>
                  </div>

                  <Form.Item name="otherReactions" label="Ph·∫£n ·ª©ng kh√°c">
                    <Input.TextArea
                      value={postVaccineInfo.otherReactions}
                      onChange={(e) => setPostVaccineInfo({ ...postVaccineInfo, otherReactions: e.target.value })}
                      rows={2}
                    />
                  </Form.Item>

                  <Form.Item
                    name="severityLevel"
                    label="M·ª©c ƒë·ªô nghi√™m tr·ªçng"
                    rules={[{ required: true, message: "Vui l√≤ng ch·ªçn m·ª©c ƒë·ªô nghi√™m tr·ªçng" }]}
                  >
                    <Input.Group compact>
                      <Button
                        type={postVaccineInfo.severityLevel === "nh·∫π" ? "primary" : "default"}
                        style={{ width: "33%" }}
                        onClick={() => setPostVaccineInfo({ ...postVaccineInfo, severityLevel: "nh·∫π" })}
                      >
                        Nh·∫π
                      </Button>
                      <Button
                        type={postVaccineInfo.severityLevel === "trung b√¨nh" ? "primary" : "default"}
                        style={{ width: "33%" }}
                        onClick={() => setPostVaccineInfo({ ...postVaccineInfo, severityLevel: "trung b√¨nh" })}
                      >
                        Trung b√¨nh
                      </Button>
                      <Button
                        type={postVaccineInfo.severityLevel === "n·∫∑ng" ? "primary" : "default"}
                        style={{ width: "34%" }}
                        onClick={() => setPostVaccineInfo({ ...postVaccineInfo, severityLevel: "n·∫∑ng" })}
                      >
                        N·∫∑ng
                      </Button>
                    </Input.Group>
                  </Form.Item>

                  <Form.Item
                    name="notes"
                    label="Ghi ch√∫ th√™m"
                    rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p ghi ch√∫ ho·∫∑c 'Kh√¥ng c√≥'" }]}
                  >
                    <Input.TextArea
                      value={postVaccineInfo.notes}
                      onChange={(e) => setPostVaccineInfo({ ...postVaccineInfo, notes: e.target.value })}
                      rows={3}
                    />
                  </Form.Item>
                </Form>
              </div>

              <div className="navigation-buttons">
                <Button type="default" onClick={goBack} className="back-button">
                  <ArrowLeftOutlined /> Quay l·∫°i
                </Button>
                <Button type="primary" onClick={proceedToNextStep} className="next-button">
                  Ti·∫øp t·ª•c <ArrowRightOutlined />
                </Button>
              </div>
            </div>
          </div>
        );
      case 4:
        return (
          <div className="step-container">
            <div className="completion-container">
              <h2>Ho√†n t·∫•t ti√™m ch·ªßng</h2>
              <div className="completion-header">
                <div className="completion-icon">‚úì</div>
                <h3>Ti√™m ch·ªßng th√†nh c√¥ng</h3>
                <p>B·ªánh nh√¢n: {selectedChild?.childrenName}</p>
                <p>Vaccine: {selectedChild?.vaccineName}</p>
              </div>

              <div className="reactions-summary">
                <h3>T√≥m t·∫Øt ph·∫£n ·ª©ng sau ti√™m</h3>
                <p>M·ª©c ƒë·ªô nghi√™m tr·ªçng: {postVaccineInfo.severityLevel}</p>
                <div className="reactions-list">
                  {postVaccineInfo.localReaction && <span className="reaction-item">Ph·∫£n ·ª©ng t·∫°i ch·ªó;</span>}
                  {postVaccineInfo.fever && <span className="reaction-item">S·ªët;</span>}
                  {postVaccineInfo.muscleAche && <span className="reaction-item">ƒêau c∆°;</span>}
                  {postVaccineInfo.fatigue && <span className="reaction-item">M·ªát m·ªèi;</span>}
                  {postVaccineInfo.headache && <span className="reaction-item">ƒêau ƒë·∫ßu;</span>}
                  {postVaccineInfo.nausea && <span className="reaction-item">Bu·ªìn n√¥n;</span>}
                  {postVaccineInfo.otherReactions && (
                    <span className="reaction-item">Kh√°c: {postVaccineInfo.otherReactions};</span>
                  )}
                  {!postVaccineInfo.localReaction &&
                    !postVaccineInfo.fever &&
                    !postVaccineInfo.muscleAche &&
                    !postVaccineInfo.fatigue &&
                    !postVaccineInfo.headache &&
                    !postVaccineInfo.nausea &&
                    !postVaccineInfo.otherReactions && <span className="reaction-item">Kh√¥ng c√≥ ph·∫£n ·ª©ng;</span>}
                </div>
                <p>Ghi ch√∫: {postVaccineInfo.notes}</p>
              </div>

              <div className="recommendations">
                <h3>H∆∞·ªõng d·∫´n theo d√µi sau ti√™m</h3>
                <ul>
                  <li>Theo d√µi tr·∫ª trong v√≤ng 30 ph√∫t sau ti√™m t·∫°i trung t√¢m</li>
                  <li>Ti·∫øp t·ª•c theo d√µi trong 24-48 gi·ªù sau ti√™m t·∫°i nh√†</li>
                  <li>Li√™n h·ªá b√°c sƒ© ngay n·∫øu c√≥ ph·∫£n ·ª©ng b·∫•t th∆∞·ªùng</li>
                  <li>Nh·∫Øc t√°i kh√°m v√† ti√™m ch·ªßng theo l·ªãch</li>
                </ul>
              </div>

              <div className="navigation-buttons">
                <Button type="default" onClick={goBack} className="back-button">
                  <ArrowLeftOutlined /> Quay l·∫°i
                </Button>
                <Button type="primary" onClick={finishProcess} className="finish-button">
                  <CheckOutlined /> Ho√†n t·∫•t
                </Button>
              </div>
            </div>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <div className="doctor-page">
      <div className="header">
        <h1>Qu·∫£n l√Ω ti√™m ch·ªßng</h1>
        <Button type="default" icon={<LogoutOutlined />} onClick={handleLogout} className="logout-button">
          ƒêƒÉng xu·∫•t
        </Button>
      </div>

      <div className="steps-container">
        <Steps current={currentStep}>
          <Step title="Ch·ªçn b·ªánh nh√¢n" />
          <Step title="Nh·∫≠p th√¥ng tin y t·∫ø" />
          <Step title="X√°c nh·∫≠n" />
          <Step title="Ti·∫øn h√†nh ti√™m ch·ªßng" />
          <Step title="Ho√†n t·∫•t ti√™m ch·ªßng" />
        </Steps>
      </div>

      <div className="content">{renderStepContent()}</div>
    </div>
  );
};

export default DoctorPage;
